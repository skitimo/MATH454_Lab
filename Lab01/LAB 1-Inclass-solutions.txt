Exercise 1:
# Create a function to generate a Taylor series of f(x)=exp(x) on x=1, up to an order of n. The output is a plot showing the convergence.
Taylor_series=function (n) 
{v=numeric(n+1);for(i in 1:(n+1)){v[i]=1/factorial(i-1)};v=cumsum(v);
plot(0:n,v,col="blue",xlab="Degree",ylab="Values");title("Estimates of Euler's number");abline(h=exp(1),col="red")}


Exercise 2:
# Create a function to compute average number of the events "sum equals 6".
# Use fix() to open a new window.
fix(EX2);
# In the new window write the function.
function (n) 
{u=numeric(n);
for(i in 1:n){
# Outcome (number of 6) of the first die among i rolls.
X1=sample(1:6,i,replace=TRUE)[1:i];
# Outcome (number of 6) of the second die among i rolls.
X2=sample(1:6,i,replace=TRUE)[1:i];
# Number of the events "sum equals 6" over the total number of rolls i.
u[i]=sum((X1+X2)==6)/i}; u}
# Use figure to illustrate the law of large numbers.
plot(EX2(1000))


Exercise 3
(a)rnorm(n,0,1); # Generate n independent standard normal variables.
(b)
# Create a function to generate sample mean of i standard normal random variables, for i=1,2,...,n.
fix(aveZ);
function (n) 
{m=numeric(n);for(i in 1:n){m[i]=mean(rnorm(i))};m}
# Plot the sequence to illustrate the law of large numbers.
plot(aveZ(1000))
(c) 
# Create a function to generate sample median of i standard normal random variables; for i=1,2,...,n.
fix(expmedian);
function (n) 
{m=numeric(n);for (i in 1:n){m[i]=median(rnorm(i))};mean(m)};
# Compute the median of 1000 independent standard normal random variables. It should be close to 0, the true median of the probability distribution N(0,1).
expmedian(1000)
[1] 0.005584863
(d)
# Create a function to compute the variance of sample mean and the variance of sample median of independent standard normal variables.
fix(var_mean_median);
function (n) 
{u=numeric(n);v=numeric(n)
for(i in 1:n){u[i]=mean(rnorm(i));v[i]=median(rnorm(i))};c(var(u),var(v));
};
var_mean_median(1000)
[1] 0.01000836 0.01551438


Exercise 4
(a)
# Input factors (number of cashers).
X=c(3,4,5,6,8,10,12);
# Input responses (waiting time in minutes).
Y=c(16,12,9.6,7.9,6,4.7,4)
# Fit a simple linear model.
lm.fit=lm(Y~X);
# Output the summary of the fitting.
summary(lm.fit);

Call:
lm(formula = Y ~ X)

Residuals:
       1        2        3        4        5        6        7 
 2.73744 -0.05374 -1.24493 -1.73612 -1.21850 -0.10088  1.61674 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  16.8890     1.6753  10.081 0.000164 ***
X            -1.2088     0.2233  -5.413 0.002910 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.798 on 5 degrees of freedom
Multiple R-squared:  0.8543,    Adjusted R-squared:  0.8251 
F-statistic: 29.31 on 1 and 5 DF,  p-value: 0.00291

(b) 
# Grab 95% confidence interval.
confint(lm.fit,level=0.95);
                2.5 %     97.5 %
(Intercept) 12.582615 21.1953590
X           -1.782811 -0.6348098
(c) 
# Forecast the waiting time Y for X=15 cashers. We also provide the 95% prediction interval.
predict(lm.fit,data.frame(X=15),interval="prediction",level=0.95);
        fit       lwr      upr
1 -1.243172 -8.045228 5.558884


Exercise 5
(a)
# One needs the package "MASS" to run discriminant analysis.
install.packages("MASS");
# Load the package.
library(MASS);
# Input the training factor data X.
x=c(5.00 , 4.70 , 4.40 , 5.12 , 4.30 , 5.44);
# Input the training response Y.
y=c(1,2,2,2,1,1);
# Create a data frame for prediction.
Gender=data.frame(x=4.90)
# Fit y using QDA.
qda.fit=qda(y~x);
# Predict all values of y.
qda.pred=predict(qda.fit,Gender);
# The result forecasts "female" for the log weight 4.90.
qda.pred;
$class
[1] 2
Levels: 1 2

$posterior
          1         2
1 0.4095252 0.5904748


(b)
# We need the package "class" for KNN method.
install.packages("class");
library(class);
# Choose k=3 to forecast the response of x=4.90.
knn.pred=knn(x,4.90,y,k=3);
# The forecast result is "female".
knn.pred
[1] 2
Levels: 1 2